name: CI Pipeline

on:
  push:
    branches: [ main, qualif ]
  pull_request:
    branches: [ main, qualif ]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          # Ajout de pytest-cov et radon
          pip install pytest-cov radon

      # ----------------------------------------------------------
      # Étapes "classiques" : flake8, radon, pytest, coverage, etc.
      # (Tu peux les conserver si tu veux des logs en direct,
      # ou les supprimer pour ne pas tout exécuter deux fois.)
      # ----------------------------------------------------------

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Analyze code complexity (Radon)
        run: |
          echo "=== Cyclomatic Complexity ==="
          radon cc app --total-average
          echo "=== Maintainability Index ==="
          radon mi app

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

      - name: Security check with bandit
        run: |
          bandit -r app

      - name: Generate documentation with pydoc
        run: |
          mkdir -p docs
          python -m pydoc -w app.main
          mv app.main.html docs/

      - name: Zip documentation
        run: |
          zip -r docs.zip docs

      # ----------------------------------------------------------
      # Build & Push Docker image (optionnel)
      # ----------------------------------------------------------

      - name: Build Docker image
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="qualif"
          fi
          echo "Build Docker image with tag: $IMAGE_TAG"
          docker build -t quentingrt/pipelines:$IMAGE_TAG .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            IMAGE_TAG="latest"
          else
            IMAGE_TAG="qualif"
          fi
          echo "Push Docker image with tag: $IMAGE_TAG"
          docker push quentingrt/pipelines:$IMAGE_TAG

      - name: Build additional artifact
        run: |
          mkdir -p build
          zip -r build/app_build.zip app

      # ----------------------------------------------------
      # Étapes pour créer la Release (si besoin) + assets
      # ----------------------------------------------------
      - name: Create GitHub Release
        id: create_release
        if: contains('main,qualif', github.ref_name)
        uses: actions/create-release@latest
        with:
          tag_name: "v_${{ github.ref_name }}_${{ github.run_number }}"
          release_name: "Release branch ${{ github.ref_name }} (run #${{ github.run_number }})"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (docs)
        if: contains('main,qualif', github.ref_name)
        uses: actions/upload-release-asset@latest
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./docs.zip
          asset_name: docs.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (app_build)
        if: contains('main,qualif', github.ref_name)
        uses: actions/upload-release-asset@latest
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app_build.zip
          asset_name: app_build.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------
      # NOUVELLES ÉTAPES : Génération d'un rapport global +
      # upload en tant qu'artefact GitHub Actions
      # ----------------------------------------------------
      - name: Generate Pipeline Report
        # On rerun flake8, radon, pytest, bandit pour consolider
        run: |
          set +e  # On ne veut pas stopper le script si une analyse échoue
          echo "# Pipeline Report - $(date)" > pipeline_report.txt

          echo "## flake8" >> pipeline_report.txt
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics >> pipeline_report.txt 2>&1
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics >> pipeline_report.txt 2>&1
          echo "" >> pipeline_report.txt

          echo "## radon (complexité et maintenabilité)" >> pipeline_report.txt
          echo "### Cyclomatic Complexity" >> pipeline_report.txt
          radon cc app --total-average >> pipeline_report.txt 2>&1
          echo "" >> pipeline_report.txt
          echo "### Maintainability Index" >> pipeline_report.txt
          radon mi app >> pipeline_report.txt 2>&1
          echo "" >> pipeline_report.txt

          echo "## Tests + Coverage" >> pipeline_report.txt
          pytest --cov=app --cov-report=term-missing >> pipeline_report.txt 2>&1
          echo "" >> pipeline_report.txt

          echo "## Sécurité (bandit)" >> pipeline_report.txt
          bandit -r app >> pipeline_report.txt 2>&1
          echo "" >> pipeline_report.txt

          set -e

      - name: Upload Pipeline Report
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-report
          path: pipeline_report.txt
